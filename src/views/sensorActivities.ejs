<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Sensor Activities</title>
  <!-- Tailwind CSS CDN -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- Chart.js CDN -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <!-- Font for modern look -->
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Inter', sans-serif;
      background: linear-gradient(to bottom right, #e0f2fe, #f0f9ff);
    }
    .fade-in {
      opacity: 0;
      transform: translateY(20px);
      animation: fadeInUp 0.6s ease-out forwards;
    }
    @keyframes fadeInUp {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
  </style>
</head>
<body class="min-h-screen">

  <div class="max-w-7xl mx-auto px-6 py-10">
    <h1 class="text-5xl font-extrabold mb-12 text-center text-blue-700 tracking-wide drop-shadow-md">
      Sensor Activity <br><span class="text-lg font-medium text-gray-600">live chart</span>
    </h1>

    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-10">
      <% Object.entries(sensorDataMap).forEach(([sensorId, data], index) => { %>
        <div class="bg-white rounded-2xl shadow-xl p-6 transform transition duration-300 hover:scale-[1.02] fade-in" style="animation-delay: <%= index * 0.1 %>s;">
          <h2 class="text-xl font-semibold text-gray-800 mb-4 text-center border-b pb-2">
             Sensor: <%= sensorId %>
          </h2>
          <canvas id="chart-<%= sensorId %>" class="w-full h-64"></canvas>
        </div>
      <% }) %>
    </div>
  </div>

  <!-- âœ… Single Script for Chart Rendering -->
  <script>
    const sensorDataMap = <%- JSON.stringify(sensorDataMap) %>;

    for (const sensorId in sensorDataMap) {
      const ctx = document.getElementById(`chart-${sensorId}`).getContext("2d");
      const dataPoints = sensorDataMap[sensorId];

      new Chart(ctx, {
        type: "line",
        data: {
          labels: dataPoints.map(d => new Date(d.time).toLocaleTimeString()),
          datasets: [{
            label: "Value",
            data: dataPoints.map(d => Number(d.data)),
            borderColor: "#3B82F6",
            backgroundColor: "rgba(59, 130, 246, 0.15)",
            borderWidth: 2,
            pointRadius: 4,
            pointBackgroundColor: "#3B82F6",
            tension: 0.35,
            fill: true
          }]
        },
        options: {
          responsive: true,
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                color: "#374151"
              },
              grid: {
                color: "#e5e7eb"
              }
            },
            x: {
              ticks: {
                color: "#374151"
              },
              grid: {
                display: false
              }
            }
          },
          plugins: {
            legend: {
              display: true,
              labels: {
                color: "#1E3A8A",
                font: {
                  weight: "bold"
                }
              }
            }
          }
        }
      });
    }
  </script>
</body>
</html>
